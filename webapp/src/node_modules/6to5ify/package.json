{
  "name": "6to5ify",
  "description": "6to5 browserify plugin",
  "version": "4.1.1",
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "homepage": "https://github.com/sebmck/6to5-browserify",
  "repository": {
    "type": "git",
    "url": "https://github.com/sebmck/6to5-browserify.git"
  },
  "bugs": {
    "url": "https://github.com/sebmck/6to5-browserify/issues"
  },
  "dependencies": {
    "6to5-core": "^3.0.0",
    "through": "2.3.4",
    "lodash": "^3.0.0"
  },
  "readme": "# 6to5ify\n\n[6to5](https://github.com/6to5/6to5) [browserify](https://github.com/substack/node-browserify) plugin\n\n## Installation\n\n    $ npm install --save-dev 6to5ify\n\n## Usage\n\n### CLI\n\n    $ browserify script.js -t 6to5ify --outfile bundle.js\n\n### Node\n\n```javascript\nvar fs = require(\"fs\");\nvar browserify = require(\"browserify\");\nvar to5ify = require(\"6to5ify\");\nbrowserify({ debug: true })\n  .transform(to5ify)\n  .require(\"./script.js\", { entry: true })\n  .bundle()\n  .on(\"error\", function (err) { console.log(\"Error : \" + err.message); })\n  .pipe(fs.createWriteStream(\"bundle.js\"));\n```\n\n#### [Options](https://6to5.github.io/usage.html#options)\n\n```javascript\nbrowserify().transform(to5ify.configure({\n  blacklist: [\"generators\"]\n}))\n```\n\n```sh\n$ browserify -d -e script.js -t [ 6to5ify --blacklist generators ]\n```\n\n#### Enable Experimental Transforms\n\nBy default 6to5's [experimental transforms](http://6to5.org/docs/usage/transformers/#es7-experimental-)\nare disabled. You can turn them on by passing `experimental` as a configuration option.\n\n```javascript\nbrowserify().transform(to5ify.configure({\n  experimental: true\n}))\n```\n\n```sh\n$ browserify -d -e script.js -t [ 6to5ify --experimental ]\n```\n\n#### Customising extensions\n\nBy default all files with the extensions `.js`, `.es`, '`.es6` and `.jsx` are compiled.\nYou can change this by passing an array of extensions.\n\n**NOTE:** This will override the default ones so if you want to use any of them\nyou have to add them back.\n\n```javascript\nbrowserify().transform(to5ify.configure({\n  extensions: [\".6to5\"]\n}))\n```\n\n```sh\n$ browserify -d -e script.js -t [ 6to5ify --extensions .6to5 ]\n```\n\n#### Relative source maps\n\nBrowserify passes an absolute path so there's no way to determine what folder\nit's relative to. You can pass a relative path that'll be removed from the\nabsolute path with the `sourceMapRelative` option.\n\n```javascript\nbrowserify().transform(to5ify.configure({\n  sourceMapRelative: \"/Users/sebastian/Projects/my-cool-website/assets\"\n}))\n```\n\n```sh\n$ browserify -d -e script.js -t [ 6to5ify --sourceMapRelative . ]\n```\n\n#### Additional options\n\n```javascript\nbrowserify().transform(to5ify.configure({\n  // Optional ignore regex - if any filenames **do** match this regex then they\n  // aren't compiled\n  ignore: /regex/,\n\n  // Optional only regex - if any filenames **don't** match this regex then they\n  // aren't compiled\n  only: /my_es6_folder/\n}))\n```\n\n```sh\n$ browserify -d -e script.js -t [ 6to5ify --ignore regex --only my_es6_folder ]\n```\n\n#### ES6 Polyfill\n\nAs a convenience, the 6to5 polyfill is exposed in 6to5ify. If you've got\na browserify-only package this may alleviate the necessity to have\n*both* 6to5 & 6to5ify installed.\n\n```javascript\n// In browser code\nrequire(\"6to5ify/polyfill\");\n```\n",
  "readmeFilename": "README.md",
  "_id": "6to5ify@4.1.1",
  "dist": {
    "shasum": "a6ba5356176e250b763574b5edc34f5b697f9a64"
  },
  "_from": "6to5ify@",
  "_resolved": "https://registry.npmjs.org/6to5ify/-/6to5ify-4.1.1.tgz"
}
